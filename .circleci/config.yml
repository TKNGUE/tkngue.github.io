# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
version: 2
jobs:
  build:
    docker:
      - image: circleci/ruby:2.4.2
    steps:
      - checkout
      - run: echo "A first hello"

# version: 2
# jobs:
#   build:
#     docker:
#       # specify the version you desire here
#        - image: circleci/ruby:2.4.1-node-browsers
      
#       # Specify service dependencies here if necessary
#       # CircleCI maintains a library of pre-built images
#       # documented at https://circleci.com/docs/2.0/circleci-images/
#       # - image: circleci/postgres:9.4

#     working_directory: ~/repo

#     steps:
#       - checkout

#       # Download and cache dependencies
#       - restore_cache:
#           keys:
#           - v1-dependencies-{{ checksum "Gemfile.lock" }}
#           # fallback to using the latest cache if no exact match is found
#           - v1-dependencies-

#       - run:
#           name: install dependencies
#           command: |
#             bundle install --jobs=4 --retry=3 --path vendor/bundle

#       - save_cache:
#           paths:
#             - ./vendor/bundle
#           key: v1-dependencies-{{ checksum "Gemfile.lock" }}
        
#       # Database setup
#       - run: bundle exec rake db:create
#       - run: bundle exec rake db:schema:load

#       # run tests!
#       - run:
#           name: run tests
#           command: |
#             mkdir /tmp/test-results
#             TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"
            
#             bundle exec rspec --format progress \
#                             --format RspecJunitFormatter \
#                             --out /tmp/test-results/rspec.xml \
#                             --format progress \
#                             "${TEST_FILES}"

#       # collect reports
#       - store_test_results:
#           path: /tmp/test-results
#       - store_artifacts:
#           path: /tmp/test-results
#           destination: test-results

# general:
#   branches:
#     only:
#       - production

# deployment:
#   production:
#     branch: production
#     commands:
#       - git config --global user.name "${CIRCLE_PROJECT_USERNAME}"
#       - git config --global user.email "${CIRCLE_PROJECT_USERNAME}@${CIRCLE_PROJECT_USERNAME}"
#       - git fetch origin --unshallow
#       - git checkout -b deploy
#       - bundler exec jekyll build
#       - git add -f _site/
#       - git commit -a -m "Deploy"
#       - git checkout gh-pages
#       - git checkout deploy _site/**
#       - rsync -av _site/ .
#       - rm -rf _site
#       - git add . && git commit -a -m "Deploy ${CIRCLE_BUILD_NUM}" && git push origin gh-pages

